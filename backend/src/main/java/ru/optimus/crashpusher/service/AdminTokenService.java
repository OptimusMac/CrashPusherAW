package ru.optimus.crashpusher.service;

import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.optimus.crashpusher.discord.DiscordManager;
import ru.optimus.crashpusher.model.AdminConfirmationToken;
import ru.optimus.crashpusher.repository.AdminConfirmationTokenRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class AdminTokenService {

    private final AdminConfirmationTokenRepository tokenRepository;
    private final DiscordManager discordService;

    @Value("${bot.channel.url}")
    private String channel;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    public String generateAdminConfirmationToken() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        String token = generateSecureToken();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        AdminConfirmationToken tokenEntity = new AdminConfirmationToken(token);
        tokenRepository.save(tokenEntity);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
        discordService.sendAdminConfirmationToken(token, channel);

        System.out.println("‚úÖ Admin token generated: " + token + " (expires at: " + tokenEntity.getExpiresAt() + ")");

        return token;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    public boolean validateAdminToken(String token) {
        if (token == null || token.trim().isEmpty()) {
            System.out.println("‚ùå Admin token validation failed: token is null or empty");
            return false;
        }

        // –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        Optional<AdminConfirmationToken> tokenEntity = tokenRepository.findByTokenAndUsedFalse(token);

        if (tokenEntity.isEmpty()) {
            System.out.println("‚ùå Admin token validation failed: token not found or already used - " + token);
            return false;
        }

        AdminConfirmationToken foundToken = tokenEntity.get();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if (!foundToken.isValid()) {
            System.out.println("‚ùå Admin token validation failed: token expired - " + token);
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
            foundToken.markAsUsed();
            tokenRepository.save(foundToken);
            return false;
        }

        System.out.println("‚úÖ Admin token validation successful: " + token);
        return true;
    }

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π)
    public boolean useAdminToken(String token) {
        Optional<AdminConfirmationToken> tokenEntity = tokenRepository.findByTokenAndUsedFalse(token);

        if (tokenEntity.isPresent() && tokenEntity.get().isValid()) {
            AdminConfirmationToken foundToken = tokenEntity.get();
            foundToken.markAsUsed();
            tokenRepository.save(foundToken);
            System.out.println("‚úÖ Admin token marked as used: " + token);
            return true;
        }

        System.out.println("‚ùå Failed to use admin token: invalid or not found - " + token);
        return false;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    private String generateSecureToken() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID + timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        String uuid = UUID.randomUUID().toString().replace("-", "").substring(0, 16);
        String timestamp = String.valueOf(System.currentTimeMillis()).substring(8);
        return "ADM-" + uuid + timestamp;
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    @Scheduled(fixedRate = 300000) // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    @Transactional
    public void cleanupExpiredTokens() {
        LocalDateTime now = LocalDateTime.now();

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        List<AdminConfirmationToken> expiredTokens = tokenRepository.findByExpiresAtBeforeAndUsedFalse(now);

        // –ü–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        for (AdminConfirmationToken token : expiredTokens) {
            token.markAsUsed();
        }

        tokenRepository.saveAll(expiredTokens);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        LocalDateTime weekAgo = now.minusDays(7);
        tokenRepository.deleteExpiredTokens(weekAgo);

        if (!expiredTokens.isEmpty()) {
            System.out.println("üßπ Cleaned up " + expiredTokens.size() + " expired admin tokens");
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    public Optional<AdminConfirmationToken> getTokenInfo(String token) {
        return tokenRepository.findByTokenAndUsedFalse(token);
    }
}