package ru.optimus.crashpusher.discord;

import lombok.*;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.components.actionrow.ActionRow;
import net.dv8tion.jda.api.components.buttons.Button;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.utils.FileUpload;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@RequiredArgsConstructor
public class DiscordManager {
    private final DiscordBot bot;
    @Getter
    @Setter
    private static boolean enabled = false;
    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss");

    @Value("${cors}")
    private String corsIp;

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∞—à–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
     */
    public void sendCrashNotification(String playerName, String crashContent, String originalFileName) {
        System.out.println(bot);
        System.out.println(enabled);
        if (!enabled || bot == null) {
            System.err.println("Discord –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        CompletableFuture.runAsync(() -> {
            Path tempFile = null;
            try {
                tempFile = createTempCrashFile(playerName, crashContent, originalFileName);

                sendCrashReportWithFile(playerName, crashContent, tempFile).join();

            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞ –≤ Discord: " + e.getMessage());
            } finally {
                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –≤ finally –±–ª–æ–∫–µ
                if (tempFile != null) {
                    try {
                        Files.deleteIfExists(tempFile);
                        System.out.println("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: " + tempFile.getFileName());
                    } catch (IOException e) {
                        System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: " + tempFile + " - " + e.getMessage());
                    }
                }
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞
     */
    private static Path createTempCrashFile(String playerName, String crashContent, String originalFileName) throws IOException {
        String timestamp = dateFormat.format(new Date());
        String safePlayerName = playerName.replaceAll("[^a-zA-Z0-9-_]", "_");
        String fileName = String.format("crash_%s_%s.txt", safePlayerName, timestamp);

        Path tempDir = Paths.get("./temp_crash_reports");
        if (!Files.exists(tempDir)) {
            Files.createDirectories(tempDir);
        }

        Path tempFile = tempDir.resolve(fileName);

        Files.write(tempFile, crashContent.getBytes(StandardCharsets.UTF_8));
        return tempFile;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CompletableFuture)
     */
    private CompletableFuture<Void> sendCrashReportWithFile(String playerName, String crashContent, Path crashFile) {
        return CompletableFuture.runAsync(() -> {
            try {
                String shortSummary = extractCrashSummary(crashContent);

                String message = String.format(
                        "üö® **–ö—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞** `%s`\n" +
                                "üìä **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** `%s`\n" +
                                "üìÅ **–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ** ‚¨áÔ∏è\n" +
                                "üïí **–í—Ä–µ–º—è:** <t:%d:F>",
                        playerName, shortSummary, System.currentTimeMillis() / 1000
                );

                File file = crashFile.toFile();
                FileUpload fileUpload = FileUpload.fromData(file, crashFile.getFileName().toString());

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                bot.sendMessageWithFile(message, fileUpload).join();

                System.out.println("–ö—Ä–∞—à-—Ä–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Discord —Å —Ñ–∞–π–ª–æ–º: " + crashFile.getFileName());

            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Discord: " + e.getMessage());
                throw new RuntimeException(e); // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            }
        });
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫—Ä–∞—à–∞
     */
    private static String extractCrashSummary(String crashContent) {
        // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        if (crashContent.contains("java.lang.NullPointerException")) {
            return "NullPointerException";
        } else if (crashContent.contains("java.lang.ArrayIndexOutOfBoundsException")) {
            return "ArrayIndexOutOfBoundsException";
        } else if (crashContent.contains("java.io.IOException")) {
            return "IOException";
        } else if (crashContent.contains("OutOfMemoryError")) {
            return "OutOfMemoryError";
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        String[] lines = crashContent.split("\n");
        for (String line : lines) {
            if (line.contains("Exception") || line.contains("Error")) {
                // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
                String[] parts = line.trim().split("\\s+");
                for (String part : parts) {
                    if (part.contains("Exception") || part.contains("Error")) {
                        return part.replace(":", "").trim();
                    }
                }
                return line.trim();
            }
        }

        return "Unknown Error";
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
     */
    public void sendMessageWithFile(String message, File file) {
        if (!enabled || bot == null) return;

        try {
            FileUpload fileUpload = FileUpload.fromData(file, file.getName());
            bot.sendMessageWithFile(message, fileUpload);
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    public CompletableFuture<Void> sendAdminConfirmationToken(String token, String channelName){
        return CompletableFuture.runAsync(() -> {
            TextChannel channel = bot.findTextChannelByName(channelName);
            if (channel == null) {
                System.err.println("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + channelName);
                return;
            }
            channel.sendMessage("–¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ %s".formatted(token)).queue();
        });
    }

    public CompletableFuture<Void> sendEmbedWithButtons(String token, String channelName, int expirationHours, String username) {
        return CompletableFuture.runAsync(() -> {
            try {
                TextChannel channel = bot.findTextChannelByName(channelName);
                if (channel == null) {
                    System.err.println("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: " + channelName);
                    return;
                }

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
                String url = createValidUrl(token);
                if (url == null) {
                    System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è —Ç–æ–∫–µ–Ω–∞: " + token);
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º –≥–∏–ª—å–¥–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                Guild guild = channel.getGuild();

                // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
                MessageData messageData = createLocalizedMessage(token, url, expirationHours, guild, username);

                MessageEmbed embed = new EmbedBuilder()
                        .setTitle(messageData.getTitle())
                        .setDescription(messageData.getDescription())
                        .setColor(0x5865F2)
                        .addField(messageData.getFields().get(0).getName(),
                                messageData.getFields().get(0).getValue(), false)
                        .addField(messageData.getFields().get(1).getName(),
                                messageData.getFields().get(1).getValue(), true)
                        .addField(messageData.getFields().get(2).getName(),
                                messageData.getFields().get(2).getValue(), true)
                        .addField(messageData.getFields().get(3).getName(),
                                messageData.getFields().get(3).getValue(), false)
                        .setThumbnail("https://cdn-icons-png.flaticon.com/512/3063/3063817.png")
                        .setFooter(messageData.getFooter(),
                                "https://cdn-icons-png.flaticon.com/512/1077/1077012.png")
                        .setTimestamp(java.time.Instant.now())
                        .build();

                ActionRow actionRow = ActionRow.of(
                        Button.link(url, messageData.getButton1())
                                .withEmoji(Emoji.fromUnicode("üìä")),
                        Button.secondary("copy_token", messageData.getButton2())
                                .withEmoji(Emoji.fromUnicode("üìã"))
                );

                channel.sendMessageEmbeds(embed)
                        .setComponents(actionRow)
                        .complete();

                System.out.println("–≠–º–±–µ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: " + channelName);

            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–º–±–µ–¥–∞ –≤ Discord: " + e.getMessage());
                e.printStackTrace();
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    private String createValidUrl(String token) {
        try {
            if (corsIp == null || corsIp.trim().isEmpty()) {
                System.err.println("corsIp –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                return null;
            }

            // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            String cleanToken = token.trim()
                    .replaceAll("\\p{C}", "") // –£–¥–∞–ª—è–µ–º –≤—Å–µ control-—Å–∏–º–≤–æ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ Unicode
                    .replaceAll("[^\\x20-\\x7E]", ""); // –£–¥–∞–ª—è–µ–º –≤—Å–µ non-ASCII —Å–∏–º–≤–æ–ª—ã

            // –û—á–∏—â–∞–µ–º corsIp –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
            String cleanCorsIp = corsIp.trim();

            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            if (cleanCorsIp.startsWith("http://") || cleanCorsIp.startsWith("https://")) {
                cleanCorsIp = cleanCorsIp.replaceFirst("^https?://", "");
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
            String url = "http://" + cleanCorsIp + "/users?token=" + cleanToken;


            System.out.println("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω URL: " + url);
            System.out.println("–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: " + cleanToken.length());
            return url;

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ URL: " + e.getMessage());
            return null;
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
     */
    private boolean isValidUrl(String url) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É URL
            return url != null &&
                    url.startsWith("http://") &&
                    url.length() > 10 && // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ URL
                    url.contains(".") && // –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ—á–∫–∞ (–¥–æ–º–µ–Ω)
                    !url.contains(" ") && // –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤
                    url.chars().allMatch(ch -> ch >= 32 && ch <= 126); // –¢–æ–ª—å–∫–æ ASCII —Å–∏–º–≤–æ–ª—ã
        } catch (Exception e) {
            return false;
        }
    }
    @Data
    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private static class MessageData {
        private String title;
        private String description;
        private List<MessageEmbed.Field> fields;
        private String footer;
        private String button1;
        private String button2;
    }

    private MessageData createLocalizedMessage(String token, String url, int hours, Guild guild, String username) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ/–≥–∏–ª—å–¥–∏–∏
        String dominantLanguage = detectDominantLanguage(guild);

        if ("ru".equals(dominantLanguage)) {
            return createRussianMessage(token, url, hours, username);
        } else {
            return createEnglishMessage(token, url, hours);
        }
    }

    private String detectDominantLanguage(Guild guild) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
        return "ru";
    }

    private MessageData createRussianMessage(String token, String url, int hours, String username) {
        MessageData data = new MessageData();
        data.setTitle("üîê –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞–Ω –¥–ª—è %s".formatted(username));
        data.setDescription("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫—Ä–∞—à–µ–π");
        data.setFields(Arrays.asList(
                new MessageEmbed.Field("üåê URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞", "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞", false),
                new MessageEmbed.Field("‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑", hours + " —á–∞—Å–æ–≤", true),
                new MessageEmbed.Field("üÜî ID —Ç–æ–∫–µ–Ω–∞", "||" + token + "||", true),
                new MessageEmbed.Field("üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏",
                        "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫—Ä–∞—à–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π\n‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                        false)
        ));
        data.setFooter("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫—Ä–∞—à–µ–π ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø");
        data.setButton1("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å");
        data.setButton2("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω");
        return data;
    }

    private MessageData createEnglishMessage(String token, String url, int hours) {
        MessageData data = new MessageData();
        data.setTitle("üîê New Access Token Generated");
        data.setDescription("A new secure access token has been generated for the Crash Analytics Dashboard");
        data.setFields(Arrays.asList(
                new MessageEmbed.Field("üåê Access URL", "Click the button below to access", false),
                new MessageEmbed.Field("‚è∞ Expires In", hours + " hours", true),
                new MessageEmbed.Field("üÜî Token ID", "||" + token + "||", true),
                new MessageEmbed.Field("üìä Dashboard Features",
                        "‚Ä¢ Real-time crash analytics\n‚Ä¢ User statistics\n‚Ä¢ Exception tracking\n‚Ä¢ Performance metrics",
                        false)
        ));
        data.setFooter("Crash Analytics System ‚Ä¢ Secure Access");
        data.setButton1("üöÄ Open Dashboard");
        data.setButton2("üìã Copy Token");
        return data;
    }
}