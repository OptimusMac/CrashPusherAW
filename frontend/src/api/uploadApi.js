// api/uploadApi.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import { api } from './crashApi';

const CHUNK_SIZE = 5 * 1024 * 1024; // 5MB chunks

// –°—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
export const startUploadSession = (filename, fileType, totalSize) =>
  api.post("/upload/start", null, {
    params: { filename, fileType, totalSize }
  }).then(r => r.data);

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞
export const uploadChunk = (sessionId, chunkIndex, totalChunks, chunk) => {
  const formData = new FormData();
  formData.append('chunkIndex', chunkIndex);
  formData.append('totalChunks', totalChunks);
  formData.append('file', chunk);

  return api.post(`/upload/chunk/${sessionId}`, formData, {
    headers: { 
      'Content-Type': 'multipart/form-data',
    },
    timeout: 60000 // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á–∞–Ω–∫
  }).then(r => r.data);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
export const getUploadProgress = (sessionId) =>
  api.get(`/upload/progress/${sessionId}`).then(r => r.data);

// –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
export const cancelUpload = (sessionId) =>
  api.delete(`/upload/${sessionId}`).then(r => r.data);

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
export const uploadFileWithProgress = async (file, fileType, onProgress, onStageChange) => {
  const totalChunks = Math.ceil(file.size / CHUNK_SIZE);
  
  try {
    // –°—Ç–∞–¥–∏—è 1: –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
    if (onStageChange) onStageChange('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...');
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é
    const startResponse = await startUploadSession(file.name, fileType, file.size);
    
    if (startResponse.status !== 'READY') {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–≥—Ä—É–∑–∫–∏: ' + startResponse.message);
    }

    const sessionId = startResponse.sessionId;
    let uploadedBytes = 0;

    // –°—Ç–∞–¥–∏—è 2: –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–æ–≤
    if (onStageChange) onStageChange('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
    
    for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
      const start = chunkIndex * CHUNK_SIZE;
      const end = Math.min(start + CHUNK_SIZE, file.size);
      const chunk = file.slice(start, end);
      
      const chunkResponse = await uploadChunk(sessionId, chunkIndex, totalChunks, chunk);
      
      if (chunkResponse.status === 'ERROR') {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–∏ ${chunkIndex + 1}: ${chunkResponse.message}`);
      }

      uploadedBytes += chunk.size;
      const progress = Math.round((uploadedBytes / file.size) * 100);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (onProgress) {
        onProgress({
          sessionId,
          chunkIndex,
          totalChunks,
          progress,
          uploadedBytes,
          totalBytes: file.size
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é
      if (onStageChange) {
        const stage = getUploadStage(chunkIndex, totalChunks, fileType);
        onStageChange(stage);
      }
    }

    // –°—Ç–∞–¥–∏—è 3: –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (onStageChange) onStageChange('–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    let finalResult = await waitForCompletion(sessionId, onProgress);
    
    return {
      success: true,
      sessionId,
      fileInfo: finalResult.fileInfo,
      message: `${fileType === 'SERVER' ? '–°–µ—Ä–≤–µ—Ä–Ω—ã–π' : '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π'} –±–∏–ª–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!`
    };

  } catch (error) {
    console.error('Upload failed:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
const waitForCompletion = async (sessionId, onProgress, maxAttempts = 60) => { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 60 –ø–æ–ø—ã—Ç–æ–∫
  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    try {
      const progress = await getUploadProgress(sessionId);
      
      console.log('üìä Progress check:', {
        attempt: attempt + 1,
        status: progress.status,
        hasFileInfo: !!progress.fileInfo,
        progress: progress.progress
      });
      
      // –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï: —Å—Ç–∞—Ç—É—Å COMPLETED –∏ –µ—Å—Ç—å fileInfo
      if (progress.status === 'COMPLETED' && progress.fileInfo) {
        console.log('‚úÖ Upload completed with fileInfo:', progress.fileInfo);
        return progress;
      }
      
      // –û–®–ò–ë–ö–ê
      if (progress.status === 'ERROR') {
        throw new Error(progress.message || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
      }

      // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å COMPLETED –Ω–æ –Ω–µ—Ç fileInfo, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
      if (progress.status === 'COMPLETED' && !progress.fileInfo) {
        console.log('üîÑ Status COMPLETED but no fileInfo, waiting...');
        await new Promise(resolve => setTimeout(resolve, 1000));
        continue;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      if (onProgress) {
        onProgress({
          progress: Math.min(95, 90 + (attempt / maxAttempts * 10)),
          uploadedBytes: progress.uploadedBytes,
          totalBytes: progress.totalBytes,
          status: progress.status
        });
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª)
      await new Promise(resolve => setTimeout(resolve, 1500));
      
    } catch (error) {
      console.error('‚ùå Progress check error:', error);
      if (attempt === maxAttempts - 1) {
        throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message);
      }
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞');
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞–¥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const getUploadStage = (chunkIndex, totalChunks, fileType) => {
  const progress = (chunkIndex / totalChunks) * 100;
  
  if (progress < 30) return '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...';
  if (progress < 60) return '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...';
  if (progress < 90) return '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...';
  
  const typeText = fileType === 'SERVER' ? '—Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ' : '–∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ';
  return `–û–±—Ä–∞–±–æ—Ç–∫–∞ ${typeText} –±–∏–ª–¥–∞...`;
};