// api/authApi.js
import { api } from './crashApi';
import { getRolesFromToken } from '../utils/jwtUtils'; // –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ò–ú–ü–û–†–¢

export const login = (username, password) =>
  api.post("/auth/login", { username, password }).then(r => r.data);

export const registerUser = (username, password) =>
  api.post("/auth/register/user", { username, password }).then(r => r.data);

export const generateAdminToken = () =>
  api.post("/auth/generate-admin-token").then(r => r.data);

export const validateAdminToken = (token) =>
  api.post("/auth/validate-admin-token", null, { params: { token } }).then(r => r.data);

export const registerAdmin = (confirmationToken, username, password) =>
  api.post("/auth/register/admin", { confirmationToken, username, password }).then(r => r.data);

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
export const saveToken = (token) => {
  localStorage.setItem('authToken', token);
};

export const getToken = () => {
  return localStorage.getItem('authToken');
};

export const removeToken = () => {
  localStorage.removeItem('authToken');
};

export const refreshToken = async () => {
  try {
    console.log('üîÑ Attempting to refresh token...');
    
    const response = await api.post("/auth/refresh");
    
    if (response.data.token) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      saveToken(response.data.token);
      console.log('‚úÖ Token refreshed successfully');
      return response.data;
    } else {
      throw new Error('No token in response');
    }
  } catch (error) {
    console.error('‚ùå Token refresh failed:', error);
    
    // –ï—Å–ª–∏ refresh –Ω–µ —É–¥–∞–ª—Å—è - —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (error.response?.status === 401) {
      console.log('üîê Refresh failed with 401, logging out...');
      removeToken();
      window.location.href = '/auth?message=session_expired';
    }
    
    throw error;
  }
};

// –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const forceTokenRefresh = async (maxRetries = 3) => {
  const token = getToken();
  
  console.log('üîÑ forceTokenRefresh started', { 
    hasToken: !!token,
    currentRoles: getRolesFromToken(token), // –¢–ï–ü–ï–†–¨ –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –ë–£–î–ï–¢ –î–û–°–¢–£–ü–ù–ê
    tokenLength: token?.length
  });
  
  if (!token) {
    console.log('‚ùå No token found for refresh');
    return false;
  }

  let attempts = 0;
  
  while (attempts < maxRetries) {
    try {
      attempts++;
      console.log(`üîÑ Token refresh attempt ${attempts}/${maxRetries}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
      if (attempts > 1) {
        await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
      }
      
      console.log('üì° Sending refresh request to /auth/refresh...');
      
      // –î–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const config = {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      };
      
      const response = await api.post("/auth/refresh", null, config);
      console.log('üì° Refresh response received:', response.data);
      
      if (response.data && response.data.token) {
        console.log('‚úÖ New token received:', {
          newTokenLength: response.data.token.length,
          newRoles: response.data.roles,
          username: response.data.username
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        saveToken(response.data.token);
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
        const newToken = getToken();
        const oldToken = token;
        
        console.log('üîç Token comparison:', {
          tokensAreDifferent: newToken !== oldToken,
          oldTokenLength: oldToken?.length,
          newTokenLength: newToken?.length,
          oldRoles: getRolesFromToken(oldToken),
          newRoles: getRolesFromToken(newToken)
        });
        
        console.log('‚úÖ Token successfully refreshed and saved to localStorage');
        return true;
      } else {
        console.log('‚ùå No token in response:', response.data);
        throw new Error('No token in response');
      }
    } catch (error) {
      console.error(`‚ùå Token refresh attempt ${attempts} failed:`, {
        status: error.response?.status,
        message: error.message,
        data: error.response?.data
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ 401 - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
      if (error.response?.status === 401) {
        console.log('üîê 401 received during refresh, forcing logout');
        removeToken();
        window.location.href = '/auth?message=session_expired';
        return false;
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
      if (attempts >= maxRetries) {
        console.log('üîê All refresh attempts failed');
        return false;
      }
    }
  }
  
  return false;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Ä–∞–∑–ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
export const safeTokenRefresh = async () => {
  try {
    await refreshToken();
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è Safe token refresh failed, but user remains logged in:', error);
    return false;
  }
};